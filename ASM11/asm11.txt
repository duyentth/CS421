Assignment 11
R-2.19 Draw the 11-item hash table resulting from hashing the keys 12, 44, 13, 88, 23,
94, 11, 39, 20, 16, and 5, using the hash function h(i) = (2i + 5) mod 11 and assuming
collisions are handled by chaining.

keys [12, 44, 13, 88, 23, 94, 11, 39, 20, 16, 5]

hash function h(i) = (2i + 5) mod 11

hash table 
INDEX   0   1   2   3   4   5   6   7   8   9   10//h(i)
KEYS        20          16  44  94  12      13        //i
                        |   |   |   |
                        5   88  39  23
                            |
                            11  



R-2.20 What is the result of the previous exercise, assuming collisions are handled by
linear probing?

h(i) = (2i + 5) mod 11
hash table
index   0   1   2   3   4   5   6   7   8   9   10
keys    11  39  20  5   16  44  88  12  23  13  94


R-2.21 Show the result of Exercise R-2.19, assuming collisions are handled by quadratic
probing, up to the point where the method fails because no empty slot is found.

(   if the slot hash h(i) = (2i + 5) mod 11  is full, then we try (h(i) + 1 * 1)) mod 11
    if (h(i) + 1 * 1)) mod 11  is also full, then we try (h(i) + 2*2)) mod 11
    ...
    this process is repeated until an empty slot is found.  )

hash table
index   0   1   2   3   4   5   6   7   8   9   10
keys    5   20  16  11  39  44  88  12  23  13  94

R-2.22 What is the result of Exercise R-2.19 assuming collisions are handled by double
hashing using a secondary hash function h’(k) = 7 – (k mod 7)?

( double hashing : h1(k) = k mod 11, h2(k) = 7 -(k mod 7), => slot: ( h(1) + i*h2(k) ) mod 11, with i = 1, 2,3,..)

hash table
index   0   1   2   3   4   5   6   7   8   9   10
keys    44  12  13  88  11  5   23  39  16  94  20


Give the pseudo-code description for performing a removal from a hash table that uses
linear probing to resolve collisions. 


Algorithm removeItem(k)
Input: hash table T with N elements and hash function h(k)
h(k) = (2k + 5) mod 11
hash table T
index   0   1   2   3   4   5   6   7   8   9   10
keys    11  39  20  5   16  44  88  12  23  13  94

Output: return item removed or "NO_SUCH_KEY" if there is no such key k in the table

item =  findItem(key)
If item != NO_SUCH_KEY then 
    replace item (k, o) with the special item AVAILABLE/DELETED
    return element o
else
    return NO_SUCH_KEY

Algorithm findItem(k)
step = 0, index = base = h(k) = k mod N
while(step < N)
    if T[index] == empty then return "NO_SUCH_KEY"
    else if T[index] == k then return index //found at index
    else 
        step ++
        index = (base + step*1) mod N //go to the next index in hash table
return "NO_SUCH_KEY"



Why is it necessary to use a special marker to
represent deleted elements?
If we just empty the slot without special marker after deleting, it will hinder searches later. 
The search process must still pass through the newly emptied slot to reach records whose probe sequence passed through this slot. 
Thus, the delete process cannot simply mark the slot as empty, because this will isolate records further down the probe sequence.



C-4.10 Suppose we are given an n-element sequence S such that each element in S
represents a different vote in an election, where each vote is given as an integer
representing the ID of the chosen candidate. Without making any assumptions about
who is running or even how many candidates there are, design an efficient algorithm to
see who wins the election S represents, assuming the candidate with the most votes
wins. Handle the possibility of multiple winners and do this using a Dictionary.
Today specify your solution using pseudo code (tomorrow we will implement in
JavaScript after discussing today’s pseudo code solution).