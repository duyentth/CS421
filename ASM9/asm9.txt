Assignment 9-10
Lesson 8:
Level 1:
R-4.5 Suppose we are given two n-element sorted sequences A and B that should not
be viewed as sets (that is, A and B may contain duplicate entries). Give an O(n)-time
pseudo-code algorithm for computing a sequence representing the set A union B (with no
duplicates).

A= [0, 1, 3, 3, 3, 5, 7] B= [2, 4, 5, 7, 7]
=> C =[0, 1, 2, 3, 4, 5, 7]

Algorithm Union(A, B)
C :=[]
indexA := 0
indexB := 0

while (indexA < A.size() and indexB < B.size()) do
    if A[indexA] < B[indexB] then
        C.insertLast(A[indexA])
        indexA ++        
    else if A[indexA] >= B[indexB] then
            C.insertLast(B[indexB])
            indexB ++
while( indexA < A.size()) do 
    C.insertLast(A[indexA++])
while (indexB < B.size()) do
    C.insertLast(B[indexB])
return C


C-4.10 Suppose we are given an n-element sequence S such that each element in S
represents a different vote in an election, where each vote is given as an integer
representing the ID of the chosen candidate. Without making any assumptions about
who is running or even how many candidates there are, design an efficient algorithm to
see who wins the election S represents, assuming the candidate with the most votes
wins.

Sequence S = [1, 2, 2, 5, 20, 10, 2, 5, 20, 30, 14, 10]
Dictionary D = [[1, 1], [2, 3], [5, 2], [ 20, 2], [10, 2], [30, 1], [14. 1]]

Algorithm findWinner(S)
 input S is a sequence of integer number representing the ID of chosen candidates
 output max value of element from a Dictionary D representing as a winner from Sequence of candidates 

D: new a Dictionary
for i = 0 to S.size() - 1 do
    v := D.findValue(S[i])
    if !v then D.insertItem(S[i], 1)//add new pair of (key, value)
    else D[S[i]] ++ //increat value of key S[i]
valuesArr := D.values()
keysArr := D.keys()
//find the max value and maxIndex from Dictionary
maxValue := 0, maxIndex = 0
for i:= 1 to valuesArr.length - 1 do
    if maxValue < valuesArr[i] then 
        maxValue = valuesArr[i]
        maxIndex = i;
return D[keysArr[maxIndex]]



Let L be a List of objects colored either red, green, or blue. Design an in-place
algorithm sortRBG(L) that places all red objects in list L before the blue colored objects,
and all the blue objects before the green objects. Thus the resulting List will have all the
red objects followed by the blue objects, followed by the green objects. Hint: use the
method swapElements to move the elements around in the List. To receive full credit,
you must use positions for traversal, e.g., first, last, after, before, swapElements, etc.
which is necessary to make it in-place.

Algorithm sortRBG1(L) 
Input: L is a list of objects colored either red, green or blue
Output: L is a sorted list of objects with the order Red -> Blue -> green

currentEle := L.first();
count := 0

while count <= L.size() do
    If currentEle.value == 'red' then 
        temp := currentEle
        L.remove(currentEle);
        L.insertFirst(temp);
    Else If currentEle.value == 'green' then
        temp := currentEle
        L.remove(currentEle);
        L.insertLast(currentEle);
    count ++
    currentEle = L.after(currentEle)
return L

A. Implement in JavaScript the Merge Sort pseudo code algorithm given in Lesson 9
for sorting an array. Add this sorting algorithm to the sort algorithms from
Assignments 7 and 8. Provided is the ArraySort-test.js file extended to run all of
the sorts we have seen so far from Assignments 7, 8, and 9. Compare the number
of key comparisons of each algorithm.


B. Using one of your sort algorithms, implement in JavaScript your pseudo code
solution to problem C 4.10 to find the winner of an election.
Level 2.
C. Implement your pseudo code solution to question R 4.5.
D. Modify your algorithm to B above to handle a tie, i.e., more than one winner.

Lesson 10.
R-4.9 Suppose we modify the deterministic version of the quick-sort algorithm so that,
instead of selecting the last element in an n-element sequence as the pivot, we choose
the element at rank (index) n/2, that is, an element in the middle of the sequence.
What is the running time of this version of quick-sort on a sequence that is already
sorted?

The worst-case for quick-sort algorithm when the pivot is a maximum or minum element of the list/squence.
The running time is O(n^2). However, if the pivot is a median element of the list/sequence,
the List will be divided into 3 parts(E = pivot , L, G) and  both L and G have the size 
nearly n/2 => the quick-sort tree is O(logn) => Total running time of Quick-sort algorithm is O(nlogn).

Take the Quick Sort algorithm provided and add it to the sort algorithms and test it like
the others. How does Quick Sort compare to the other sorting algorithms?
